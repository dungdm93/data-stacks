logging {
	level  = "info"
	format = "logfmt"
}

prometheus.remote_write "kit" {
	endpoint {
		url = "http://mimir-proxy.grafana-mimir.svc:9009/api/v1/push"

		headers = {
			"X-Scope-OrgId" = "kit106",
		}
	}

	external_labels = {
		cluster = "kit106",
	}
}

discovery.kubernetes "node" {
	role = "node"
}

discovery.relabel "node" {
	targets = discovery.kubernetes.node.targets

	rule {
		source_labels = ["__meta_kubernetes_node_label_kubernetes_io_os"]
		target_label  = "os"
	}

	rule {
		source_labels = ["__meta_kubernetes_node_label_kubernetes_io_arch"]
		target_label  = "arch"
	}

	rule {
		source_labels = ["__meta_kubernetes_node_name"]
		target_label  = "node_name"
	}

	rule {
		source_labels = ["__meta_kubernetes_node_label_topology_kubernetes_io_region"]
		target_label  = "region"
	}

	rule {
		source_labels = ["__meta_kubernetes_node_label_topology_kubernetes_io_zone"]
		target_label  = "zone"
	}
}

remote.kubernetes.configmap "metrics_module" {
	name      = "metrics-module"
	namespace = "grafana-agent"
}

module.string "workloads" {
	content = remote.kubernetes.configmap.metrics_module.data["workloads_operator.river"]

	arguments {
		receivers = [prometheus.remote_write.kit.receiver]
	}
}

module.string "controlplane" {
	content = remote.kubernetes.configmap.metrics_module.data["controlplane.river"]

	arguments {
		nodes     = discovery.relabel.node.output
		receivers = [prometheus.remote_write.kit.receiver]
	}
}

module.string "etcd" {
	content = remote.kubernetes.configmap.metrics_module.data["etcd.river"]

	arguments {
		nodes     = discovery.relabel.node.output
		receivers = [prometheus.remote_write.kit.receiver]
	}
}

module.string "worker" {
	content = remote.kubernetes.configmap.metrics_module.data["worker.river"]

	arguments {
		nodes     = discovery.relabel.node.output
		receivers = [prometheus.remote_write.kit.receiver]
	}
}
