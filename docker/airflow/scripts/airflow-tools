#!/usr/bin/env python3

def get_config(args):
    import logging
    logging.disable(logging.CRITICAL)

    from airflow.configuration import conf
    return conf.get(args.section, args.key)


def parse_url(args):
    from urllib.parse import urlparse

    url = urlparse(args.url)
    part = getattr(url, args.part)
    if not part:
        part = args.default
    return part


def build_argparse():
    import argparse

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='sub-commands')

    # get-config sub-command
    gcp = subparsers.add_parser('get-config', help='Get airflow config from file or envvar')
    gcp.add_argument('section', type=str, help='Airflow config section')
    gcp.add_argument('key', type=str, help='Airflow config key')
    gcp.set_defaults(func=get_config)

    # parse_url sub-command
    pup = subparsers.add_parser('parse-url', help='Parse URLs into components')
    pup.add_argument('url', type=str, help='URL is going to be parse')
    pup.add_argument('--default', type=str, help='Default value', default="")
    ucg = pup.add_mutually_exclusive_group()  # url-component group
    ucg.add_argument('--scheme', dest='part', action='store_const', const='scheme', help='Extract scheme from given URL')
    ucg.add_argument('--user', dest='part', action='store_const', const='username', help='Extract username from given URL')
    ucg.add_argument('--pass', dest='part', action='store_const', const='password', help='Extract password from given URL')
    ucg.add_argument('--host', dest='part', action='store_const', const='hostname', help='Extract hostname from given URL')
    ucg.add_argument('--port', dest='part', action='store_const', const='port',     help='Extract port from given URL')
    ucg.add_argument('--path', dest='part', action='store_const', const='path',     help='Extract path from given URL')
    # params={} | query={} | fragment=[]
    pup.set_defaults(func=parse_url)

    return parser


if __name__ == "__main__":
    parser = build_argparse()

    args = parser.parse_args()
    result = args.func(args)
    print(result)
