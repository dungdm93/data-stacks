{{- $airflow := .Values.airflow }}
{{- $core := (dict "core" dict | mergeOverwrite $airflow).core }}
{{- $celery := (dict "celery" dict | mergeOverwrite $airflow).celery }}
{{- $kubernetes := (dict "kubernetes" dict | mergeOverwrite $airflow).kubernetes }}
{{- $elasticsearch := (dict "elasticsearch" dict | mergeOverwrite $airflow).elasticsearch }}

{{- $logs := .Values.logs }}
{{- $dags := .Values.dags }}

{{- $_ := set $core "dags_folder" (include "airflow.dags.folder" $dags) }}
{{- $_ := set $core "donot_pickle" $dags.doNotPickle }}
{{- $_ := set $core "sql_alchemy_conn" (include "airflow.database" .) }}

{{- $logsUrl := urlParse $logs.path }}
{{- $_ := set $core "logging_level" $logs.level }}
{{- if include "airflow.logs.local" $logs }}
  {{- $_ := set $core "base_log_folder" $logsUrl.path }}
  {{- $_ := set $core "remote_logging" false }}
{{- else }}
  {{- $_ := set $core "remote_logging" true }}
  {{- $_ := set $core "remote_log_conn_id" $logs.remoteConnId }}
  {{- if eq $logsUrl.scheme "es" }}
    {{- $_ := unset $core "remote_base_log_folder" }}
    {{- $_ := set $elasticsearch "host" $logsUrl.host }}
  {{- else if eq $logsUrl.scheme "wasbs" }}
    {{- $_ := set $core "remote_base_log_folder" "//TODO" }}
  {{- else }}
    {{- $_ := set $core "remote_base_log_folder" $logs.path }}
  {{- end }}
{{- end }}

{{- if eq $core.executor "CeleryExecutor" }}
  {{- $_ := set $celery "broker_url" (include "airflow.celeryBroker" .) }}
  {{- if not $celery.result_backend }}
    {{- $_ := set $celery "result_backend" (include "airflow.celeryResultBackend" .) }}
  {{- end }}
{{- end }}

{{- if eq $core.executor "KubernetesExecutor" }}
  {{- $worker := mergeOverwrite (deepCopy .Values.commons) .Values.worker -}}

  {{- $_ := set $kubernetes "in_cluster"                         true                     }}
  {{- $_ := set $kubernetes "namespace"                          .Release.Namespace       }}
  {{- $_ := set $kubernetes "worker_container_repository"        $worker.image.repository }}
  {{- $_ := set $kubernetes "worker_container_tag"               $worker.image.tag        }}
  {{- $_ := set $kubernetes "worker_container_image_pull_policy" .Values.imagePullPolicy  }}
  {{- $_ := set $kubernetes "worker_service_account_name" (include "airflow.serviceAccountName" .) }}
  # image_pull_secrets
  {{- $_ := set $kubernetes "delete_worker_pods" false }}

  {{- $_ := set $kubernetes "airflow_configmap" (printf "%s-config" (include "airflow.fullname" .)) }}
  # env_from_configmap_ref
  # env_from_secret_ref

  # DAGs
  {{- if eq $dags.fetcher "none" }}
    {{- $_ := set $kubernetes "dags_in_image" true }}
  {{- else if eq $dags.fetcher "git" }}
    {{- $_ := set $kubernetes "dags_in_image" false }}
    {{- $gitsync := $dags.git -}}

    {{- $_ := set $kubernetes "git_repo"    $gitsync.repo    }}
    {{- $_ := set $kubernetes "git_branch"  $gitsync.branch  }}
    {{- $_ := set $kubernetes "git_subpath" $gitsync.subPath }}
    {{- $_ := set $kubernetes "git_dags_folder_mount_point" $dags.path }}

    {{- if $gitsync.auth.username }}
      {{- $_ := set $kubernetes "git_sync_credentials_secret" (printf "%s-gitsync" (include "airflow.fullname" .)) }}
    {{- else if $gitsync.auth.sshKey }}
      {{- $_ := set $kubernetes "git_ssh_key_secret_name" (printf "%s-gitsync-sshkey" (include "airflow.fullname" .)) }}
    {{- else if $gitsync.auth.externalSshKeySecret.name }}
      {{- $_ := set $kubernetes "git_ssh_key_secret_name" $gitsync.auth.externalSshKeySecret.name }}
      {{- if not (eq ($gitsync.auth.externalSshKeySecret.key | default "gitSshKey") "gitSshKey")}}
        {{- fail "Custom externalSshKeySecret.key is not support by KubernetesExecutor yet" }}
      {{- end }}
    {{- end }}
  {{- else if eq $dags.fetcher "mount" }}
    {{- $_ := set $kubernetes "dags_in_image" false }}

    {{- $_ := set $kubernetes "dags_volume_claim" ($dags.mount.existingClaim | default (printf "%s-dags" (include "airflow.fullname" .))) }}
    {{- $_ := set $kubernetes "dags_volume_subpath" $dags.mount.subPath }}
  {{- end }}

  # Logs
  {{- if include "airflow.logs.local.persistence" $logs }}
    {{- $_ := set $kubernetes "logs_volume_claim" ($logs.persistence.existingClaim | default (printf "%s-logs" (include "airflow.fullname" .))) }}
    {{- $_ := set $kubernetes "logs_volume_subpath" $logs.persistence.subPath }}
  {{- end }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "airflow.fullname" . }}-config
  labels:
    {{- include "airflow.labels" . | nindent 4 }}
data:
  airflow.cfg: |
{{- range $key, $value := $airflow }}
  {{- if $value }}
    [{{ $key }}]
    {{- range $elem, $elemVal := $value }}
    {{ $elem }} = {{ $elemVal }}
    {{- end }}
  {{- end }}
{{ end }}
