nameOverride: ""
fullnameOverride: ""

imagePullPolicy: IfNotPresent
imagePullSecrets: []
# - name: regcred

# The executor class that airflow should use. Choices include
# SequentialExecutor, LocalExecutor, CeleryExecutor, DaskExecutor, KubernetesExecutor
executor: CeleryExecutor

# Airflow uses Fernet to encrypt passwords in the connection configuration.
# Generate fernetKey with:
# ```python
# from cryptography.fernet import Fernet
# fernet_key= Fernet.generate_key()
# print(fernet_key.decode())
# ```
# More info at:
# - https://airflow.apache.org/docs/stable/security.html#securing-connections
fernetKey: ""

airflow:
  core:
    load_examples: false
    load_default_connections: false
  webserver:
    expose_config: true

# Airflow FAB-based webserver configs
# example: https://github.com/apache/airflow/blob/master/airflow/config_templates/default_webserver_config.py
webserver_config: ""

# examples:
# * https://github.com/astronomer/airflow-chart/blob/master/templates/configmap.yaml#L124
# * https://github.com/apache/airflow/blob/master/airflow/config_templates/airflow_local_settings.py
airflow_local_settings: ""
  # def pod_mutation_hook(pod: Pod):
  #   pod.annotations['airflow.apache.org/launched-by'] = 'Tests'

# Commons k8s configurations. It can be overridden by
# airflow components: webserver, scheduler, worker, flower
commons:
  image:
    repository: hub.teko.vn/dataops/airflow
    tag: "2.2-b2"
  replicas: null
  command: []
  args: []
  env: []

  labels: {}
  podLabels: {}
  annotations: {}
  podAnnotations: {}

  resources: {}

  schedulerName: null
  runtimeClassName: null
  priorityClassName: null

  affinity: {}
  tolerations: []
  nodeSelector: {}

  securityContext: {}
  podSecurityContext:
    fsGroup: 1000

  extraVolumes: []
  extraVolumeMounts: []

webserver:
  args: [webserver]

scheduler:
  args: [scheduler]

triggerer:
  args: [triggerer]
  terminationPeriod: 120  # 2 minutes to worker complete its tasks

worker:
  args: [worker]
  terminationPeriod: 120  # 2 minutes to worker complete its tasks

flower:
  args: [flower]
  service:
    type: ClusterIP
    port: 5555
    nodePort:
    annotations: {}
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: airflow.local
        path: /flower
    tls: []
    #  - secretName: airflow.local-tls
    #    hosts:
    #      - airflow.local

logGroomer:
  command:
  args: ["log-groomer"]
  resources: {}
  #  limits:
  #   cpu: 100m
  #   memory: 128Mi
  #  requests:
  #   cpu: 100m
  #   memory: 128Mi
  securityContext: {}

dags:
  path: /opt/airflow/dags
  doNotPickle: false
  # DAGs fetcher, options:
  # * none: DAGs are embedded inside the Docker image
  # * git: sync DAGs from git repo
  # * volume: using a share file system like S3FS,...
  fetcher: git

  # Beaware when use git fetcher, the real `dags_folder`
  # will changing to `{{.dags.path}}/repo/{{.dags.git.subPath}}`
  git:
    repo:    ""
    branch:  master
    subPath: ""

    image:
      repository: k8s.gcr.io/git-sync/git-sync
      tag:   v3.3.4

    auth:
      username:
      password:

      sshKey:
      externalSshKeySecret:
        name:
        key:

    syncInterval: 60

  volume:
    subPath: ""

    # Option 1: helm managed PVC
    storageClass: null
    accessMode: ReadWriteMany
    size: 1G

    # Option 2: existing PVC
    existingClaim: null

logs:
  level: INFO
  baseLogFolder: /opt/airflow/logs/

  # Airflow Connection ID for remote logging
  remoteLogConnId:

  # Remote logging location configuration:
  # * Amazon S3:          s3://bucket/path/to/logs
  # * Amazon CloudWatch:  cloudwatch://...
  # * Google GCS:         gs://bucket/path/to/logs
  # * Google StackDriver: stackdriver://...
  # * Azure WASB:         wasbs://...
  remoteBaseLogFolder:

  # Storage configuration for local logs
  persistence:
    enabled: false

    subPath: ""

    # Option 1: helm managed PVC
    storageClass: null
    accessMode: ReadWriteMany
    size: 1G

    # Option 2: existing PVC
    existingClaim: null

  ephemeral:
    enabled: false
    storageClass: null
    accessMode: ReadWriteMany
    size: 1G

postgresql:
  enabled: true

  postgresqlUsername: postgres
  postgresqlPassword: airflow
  postgresqlDatabase: airflow

  replication:
    enabled: false

  persistence:
    enabled: true

# See: https://docs.sqlalchemy.org/en/13/dialects/index.html
externalDatabase: ""

redis:
  enabled: true

  password: airflow

  cluster:
    enabled: false

  sentinel:
    enabled: false

  master:
    persistence:
      enabled: true

# See: https://docs.celeryproject.org/en/stable/getting-started/brokers/index.html
externalCeleryBroker: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

rbac:
  # If true, create & use RBAC resources
  create: true
  # If true, create and use PodSecurityPolicy
  pspEnable: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  # enable spark-on-k8s-operator
  sparkOperator:
    enable: true
    namespace: ""

podDisruptionBudget:
  enabled: false
  # minAvailable: 1
  # maxUnavailable:

service:
  type: ClusterIP
  port: 8080
  nodePort:
  annotations: {}
  sessionAffinity: "None"
  sessionAffinityConfig: {}

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: airflow.local
      path: /
  tls: []
  #  - secretName: airflow.local-tls
  #    hosts:
  #      - airflow.local
