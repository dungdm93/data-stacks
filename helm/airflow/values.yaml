nameOverride: ""
fullnameOverride: ""

imagePullPolicy: IfNotPresent
imagePullSecrets: []
# - name: regcred

airflow:
  core:
    executor: CeleryExecutor
    load_examples: false
  webserver:
    expose_config: true

# Commons k8s configurations. It can be overridden by
# airflow components: webserver, scheduler, worker, flower
commons:
  image:
    repository: hub.teko.vn/data/airflow
    tag: 1.10.7-all
  replicas: null
  command: []
  args: []
  env: []

  labels: {}
  podLabels: {}
  annotations: {}
  podAnnotations: {}

  resources: {}

  schedulerName: null
  runtimeClassName: null
  priorityClassName: null

webserver:
  args: [webserver]

scheduler:
  args: [scheduler]

worker:
  args: [worker]
  terminationPeriod: 120  # 2 minutes to worker complete its tasks

flower:
  args: [flower]
  service:
    type: ClusterIP
    port: 5555
    nodePort:
    annotations: {}
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: airflow.local
        path: /flower
    tls: []
    #  - secretName: airflow.local-tls
    #    hosts:
    #      - airflow.local

dags:
  path: /opt/airflow/dags
  doNotPickle: false
  # DAGs fetcher, options:
  # * none: DAGs are embedded inside the Docker image
  # * git: sync DAGs from git repo
  # * mount: using a share file system like S3FS,...
  fetcher: git

  git:
    repo:    ""
    branch:  master
    subpath: ""

    image:
      repository: k8s.gcr.io/git-sync
      tag:   v3.1.5

    auth:
      username:
      password:

      sshKey:
      externalSshKeySecret:
        name:
        key:

    syncInterval: 60

  mount:
    subPath: ""

    # Option 1: helm managed PVC
    storageClass: null
    accessMode: ReadWriteMany
    size: 1G

    # Option 2: existing PVC
    existingClaim: null

    # Option 3: using inline volume like ConfigMap,...
    inlineVolume: {}

logs:
  # Logging location configuration.
  # For remote logging:
  #   * Amazon S3:          s3://bucket/path/to/logs
  #   * Amazon CloudWatch:  cloudwatch://...
  #   * Google GCS:         gs://bucket/path/to/logs
  #   * Google StackDriver: stackdriver://...
  #   * Azure WASB:         wasbs://...
  #   * ElasticSearch:      es://host:port
  # For local logging:
  #   * /path/to/logs
  #   * files://path/to/logs
  path: /opt/airflow/logs

  # Airflow Connection ID for remote logging
  remoteConnId:

  # Airflow job log level
  level: INFO

  # Storage configuration for local logs
  persistence:
    enabled: false

    subPath: ""
    subPathExpr: ""

    # Option 1: helm managed PVC
    storageClass: null
    accessMode: ReadWriteMany
    size: 1G

    # Option 2: existing PVC
    existingClaim: null

    # Option 3: using inline volume like NFS,...
    inlineVolume: {}

postgresql:
  enabled: true

  postgresqlUsername: postgres
  postgresqlPassword: airflow
  postgresqlDatabase: airflow

  replication:
    enabled: false

  persistence:
    enabled: true

# See: https://docs.sqlalchemy.org/en/13/dialects/index.html
externalDatabase: ""

redis:
  enabled: true

  password: airflow

  cluster:
    enabled: false

  sentinel:
    enabled: false

  master:
    persistence:
      enabled: true

# See: https://docs.celeryproject.org/en/stable/getting-started/brokers/index.html
externalCeleryBroker: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

rbac:
  # If true, create & use RBAC resources
  create: true
  # If true, create and use PodSecurityPolicy
  pspEnable: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podDisruptionBudget:
  enabled: false
  # minAvailable: 1
  # maxUnavailable:

service:
  type: ClusterIP
  port: 8080
  nodePort:
  annotations: {}
  sessionAffinity: "None"
  sessionAffinityConfig: {}

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: airflow.local
      path: /
  tls: []
  #  - secretName: airflow.local-tls
  #    hosts:
  #      - airflow.local
