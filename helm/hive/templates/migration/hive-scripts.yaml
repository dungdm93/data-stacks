{{- if .Values.migration.enabled }}
{{- $dbPortMap := include "hive.dbPortMap" . | fromYaml }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "hive.fullname" . }}-hive-scripts
  labels:
    {{- include "hive.labels" . | nindent 4 }}
data:
  wait-for: |
    #!/bin/bash
    : ${NRETRY:=30}
    host=$1
    port=$2

    if ! command -v nc >/dev/null 2>&1; then
      echo >&2 "[$(date -Iseconds)] nc command not found"
      exit 1
    fi

    i=0
    while ! nc -z "$host" "$port" >/dev/null 2>&1; do
        ((i+=1))

        if [ $i -ge $NRETRY ]; then
            echo >&2 "[$(date -Iseconds)] $host:$port still not reachable, giving up"
            exit 1
        fi

        echo "[$(date -Iseconds)] waiting for $host:$port... $i/$NRETRY"
        sleep 1
    done

  hive-migration.sh: |
    #!/bin/bash
    set -euo pipefail

    DB_TYPE="{{ .Values.postgresql.enabled | ternary "postgres" .Values.externalDatabase.type }}"
    {{- if ($pg := .Values.postgresql).enabled }}
    DB_HOST="{{ include "call-nested" (list . "postgresql" "postgresql.fullname") }}"
    DB_PORT="{{ $pg.service.port }}"
    {{- else if not ($db := .Values.externalDatabase).url }}
    DB_HOST="{{ $db.host }}"
    DB_PORT="{{ $db.port | default (index $dbPortMap $db.type) }}"
    {{- end }}

    if [ -n "$DB_HOST" ]; then
      wait-for $DB_HOST $DB_PORT
    fi

    schematool -dbType "${DB_TYPE}" -upgradeSchema -verbose ||
    schematool -dbType "${DB_TYPE}" -initSchema -verbose

{{- end }}
