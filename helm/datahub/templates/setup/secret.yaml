{{ $env := dict }}
{{- $_ := set $env "ENTITY_REGISTRY_CONFIG_PATH" "/datahub/datahub-gms/resources/entity-registry.yml" }}

# Database (MySQL/PostgreSQL)
{{- if eq .Values.entityService.impl "ebean" -}}
  {{- $ebean := .Values.ebean }}
  {{- $datasourceHost := printf "%s:%d" ($ebean.host | required "missing 'ebean.host'") (int $ebean.port | required "missing 'ebean.port'") }}
  {{- $_ := set $env "EBEAN_DATASOURCE_HOST" $datasourceHost }}
  {{- $_ := set $env "EBEAN_DATASOURCE_URL" (printf "jdbc:%s://%s/%s" $ebean.type $datasourceHost ($ebean.database | required "missing 'ebean.database'")) }}
  {{- $driverMap := dict "mysql" "com.mysql.jdbc.Driver" "postgresql" "org.postgresql.Driver" }}
  {{- $_ := set $env "EBEAN_DATASOURCE_DRIVER" ($ebean.driver | default (get $driverMap $ebean.type | required "known ebean.type")) }}
  {{- if $ebean.useAwsIamAuth }}
    {{- $_ := set $env "EBEAN_POSTGRES_USE_AWS_IAM_AUTH" true}}
  {{- else }}
    {{- $_ := set $env "EBEAN_DATASOURCE_USERNAME" ($ebean.username | required "missing 'ebean.username'") }}
    {{- $_ := set $env "EBEAN_DATASOURCE_PASSWORD" ($ebean.password | required "missing 'ebean.password'") }}
  {{- end -}}
{{- end -}}

# ElasticSearch
{{- $elasticsearch := .Values.elasticsearch }}
{{- $_ := set $env "ELASTICSEARCH_HOST" ($elasticsearch.host | required "missing 'elasticsearch.host'") }}
{{- $_ := set $env "ELASTICSEARCH_PORT" ($elasticsearch.port | required "missing 'elasticsearch.port'") }}
{{- $_ := set $env "ELASTICSEARCH_USE_SSL" $elasticsearch.useSSL }}
{{- if $elasticsearch.username }}
  {{- $_ := set $env "ELASTICSEARCH_USERNAME" $elasticsearch.username }}
  {{- $_ := set $env "ELASTICSEARCH_PASSWORD" ($elasticsearch.password | required "missing 'elasticsearch.password'") }}
{{- else if $elasticsearch.useAwsIamAuth -}}
  {{- $_ := set $env "OPENSEARCH_USE_AWS_IAM_AUTH" true }}
{{- end }}
{{- if eq .Values.elasticsearch.variants "opensearch" }}
  {{- $_ := set $env "USE_AWS_ELASTICSEARCH" true }}
{{- end }}
{{- include "datahub.setEnv" (list $env "INDEX_PREFIX" $elasticsearch.index.prefix) }}
{{- include "datahub.setEnv" (list $env "ELASTICSEARCH_NUM_SHARDS_PER_INDEX" $elasticsearch.index.numShards) }}
{{- include "datahub.setEnv" (list $env "ELASTICSEARCH_NUM_REPLICAS_PER_INDEX" $elasticsearch.index.numReplicas) }}
{{- include "datahub.setEnv" (list $env "ELASTICSEARCH_INDEX_BUILDER_NUM_RETRIES" $elasticsearch.index.numRetries) }}
{{- include "datahub.setEnv" (list $env "ELASTICSEARCH_INDEX_BUILDER_REFRESH_INTERVAL_SECONDS" $elasticsearch.index.refreshIntervalSeconds) }}

# Kafka
{{- $kafka := .Values.kafka }}
{{- $_ := set $env "KAFKA_BOOTSTRAP_SERVER" (join "," ($kafka.bootstrapServers | required "missing 'kafka.bootstrapServers'")) }}
{{- if eq $kafka.schemaRegistry.type "CONFLUENT" -}}
  {{- $_ := set $env "SCHEMA_REGISTRY_TYPE" "KAFKA" }}
  {{- $confluent := $kafka.confluent }}
  {{- $_ := set $env "KAFKA_SCHEMAREGISTRY_URL" ($confluent.url | required "missing 'kafka.confluent.url'") }}
  {{- $_ := set $env "KAFKA_PROPERTIES_SECURITY_PROTOCOL" $confluent.securityProtocol }}
{{- else if eq $kafka.schemaRegistry.type "AWS_GLUE" -}}
  {{- $_ := set $env "SCHEMA_REGISTRY_TYPE" "AWS_GLUE" }}
  {{- $awsGlue := $kafka.awsGlue }}
  {{- $_ := set $env "AWS_GLUE_SCHEMA_REGISTRY_REGION" ($awsGlue.region | required "missing 'kafka.awsGlue.region'") }}
  {{- $_ := set $env "AWS_GLUE_SCHEMA_REGISTRY_NAME" ($awsGlue.registryName | required "missing 'kafka.awsGlue.registryName'") }}
{{- else }}
  {{- fail (printf "unknow kafka.schemaRegistry.type %s, support 'CONFLUENT' and 'AWS_GLUE'" .Values.kafka.schemaRegistry.type) }}
{{- end -}}
{{- include "datahub.setEnv" (list $env "PARTITIONS" $kafka.partitions) }}
{{- include "datahub.setEnv" (list $env "REPLICATION_FACTOR" $kafka.replicationFactor) }}

{{- $_ := set $env "MCE_CONSUMER_ENABLED" true }} # deprecated in favor of MCP_CONSUMER_ENABLED
{{- $_ := set $env "MCP_CONSUMER_ENABLED" true }}
{{- $_ := set $env "MAE_CONSUMER_ENABLED" true }} # deprecated in favor of MCL_CONSUMER_ENABLED
{{- $_ := set $env "MCL_CONSUMER_ENABLED" true }}
{{- $_ := set $env "PE_CONSUMER_ENABLED"  true }}
{{- $consumerGroups := $kafka.consumerGroups }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_LOG_KAFKA_CONSUMER_GROUP_ID"       $consumerGroups.metadataChangeLog) }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_PROPOSAL_KAFKA_CONSUMER_GROUP_ID"  $consumerGroups.metadataChangeProposal) }}
{{- include "datahub.setEnv" (list $env "PLATFORM_EVENT_KAFKA_CONSUMER_GROUP_ID"            $consumerGroups.platformEvent) }}
{{- include "datahub.setEnv" (list $env "METADATA_AUDIT_EVENT_KAFKA_CONSUMER_GROUP_ID"      $consumerGroups.metadataAuditEvent) }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_EVENT_KAFKA_CONSUMER_GROUP_ID"     $consumerGroups.metadataChangeEvent) }}
{{- include "datahub.setEnv" (list $env "DATAHUB_USAGE_EVENT_KAFKA_CONSUMER_GROUP_ID"       $consumerGroups.usageEvent) }}

{{- $topics := $kafka.topics }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_LOG_VERSIONED_TOPIC_NAME"    $topics.metadataChangeLogVersioned) }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_LOG_TIMESERIES_TOPIC_NAME"   $topics.metadataChangeLogTimeseries) }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_PROPOSAL_TOPIC_NAME"         $topics.metadataChangeProposal) }}
{{- include "datahub.setEnv" (list $env "FAILED_METADATA_CHANGE_PROPOSAL_TOPIC_NAME"  $topics.failedMetadataChangeProposal) }}
{{- include "datahub.setEnv" (list $env "PLATFORM_EVENT_TOPIC_NAME"                   $topics.platformEvent) }}
{{- include "datahub.setEnv" (list $env "METADATA_AUDIT_EVENT_NAME"                   $topics.metadataAuditEvent) }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_EVENT_NAME"                  $topics.metadataChangeEvent) }}
{{- include "datahub.setEnv" (list $env "FAILED_METADATA_CHANGE_EVENT_NAME"           $topics.failedMetadataChangeEvent) }}
{{- include "datahub.setEnv" (list $env "DATAHUB_UPGRADE_HISTORY_TOPIC_NAME"          $topics.upgradeHistory) }}
{{- include "datahub.setEnv" (list $env "DATAHUB_USAGE_EVENT_NAME"                    $topics.usageEvent) }}

{{- $_ := set $env "DATAHUB_ANALYTICS_ENABLED" .Values.analytics.enabled }}
{{- $_ := set $env "ENABLE_PROMETHEUS" .Values.metrics.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "datahub.fullname" . }}-hooks
  labels:
    {{- include "datahub.labels" . | nindent 4 }}
    app.kubernetes.io/component: setup
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-10"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
type: Opaque
stringData:
  {{- range $key, $value := $env }}
  {{ $key }}: {{ $value | quote }}
  {{- end }}
