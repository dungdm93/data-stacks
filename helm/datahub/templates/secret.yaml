{{ $env := dict }}
# https://datahubproject.io/docs/cli/#environment-variables-supported
{{- include "datahub.setEnv" (list $env "DATAHUB_BASE_URL" .Values.frontend.baseUrl) }}
{{- include "datahub.setEnv" (list $env "DATAHUB_GMS_URL"  (printf "http://%s-gms:8080" (include "datahub.fullname" .))) }}
{{- $_ := set $env "DATAHUB_GMS_HOST" (printf "%s-gms" (include "datahub.fullname" .)) }}
{{- $_ := set $env "DATAHUB_GMS_PORT" 8080 }}
{{- $_ := set $env "DATAHUB_GMS_USE_SSL" false }}
{{- $_ := set $env "DATAHUB_GMS_PROTOCOL" "http" }}

{{- $gmsAuthn := .Values.authn.gms }}
{{- $_ := set $env "METADATA_SERVICE_AUTH_ENABLED" $gmsAuthn.enabled }}
{{- if $gmsAuthn.enabled }}
  {{- $secret := (lookup "v1" "Secret" .Release.Namespace (include "datahub.fullname" .)).data | default dict -}}
  {{- include "datahub.setEnv" (list $env "DATAHUB_SYSTEM_CLIENT_ID"     $gmsAuthn.systemClientId) }}
  {{- include "datahub.setSecretEnv" (list $env "DATAHUB_SYSTEM_CLIENT_SECRET" $gmsAuthn.systemClientSecret $secret (randAlphaNum 32)) }}
{{- end }}

{{- $kafka := .Values.kafka }}
{{- $_ := set $env "KAFKA_BOOTSTRAP_SERVER" (join "," ($kafka.bootstrapServers | required "missing 'kafka.bootstrapServers'")) }}
{{- if eq $kafka.schemaRegistry.type "CONFLUENT" -}}
  {{- $_ := set $env "SCHEMA_REGISTRY_TYPE" "KAFKA" }}
  {{- $confluent := $kafka.confluent }}
  {{- $_ := set $env "KAFKA_SCHEMAREGISTRY_URL" ($confluent.url | required "missing 'kafka.confluent.url'") }}
  {{- $_ := set $env "KAFKA_PROPERTIES_SECURITY_PROTOCOL" $confluent.securityProtocol }}
{{- else if eq $kafka.schemaRegistry.type "AWS_GLUE" -}}
  {{- $_ := set $env "SCHEMA_REGISTRY_TYPE" "AWS_GLUE" }}
  {{- $awsGlue := $kafka.awsGlue }}
  {{- $_ := set $env "AWS_GLUE_SCHEMA_REGISTRY_REGION" ($awsGlue.region | required "missing 'kafka.awsGlue.region'") }}
  {{- $_ := set $env "AWS_GLUE_SCHEMA_REGISTRY_NAME" ($awsGlue.registryName | required "missing 'kafka.awsGlue.registryName'") }}
{{- else }}
  {{- fail (printf "unknow kafka.schemaRegistry.type %s, support 'CONFLUENT' and 'AWS_GLUE'" .Values.kafka.schemaRegistry.type) }}
{{- end -}}

{{- $topics := $kafka.topics }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_LOG_VERSIONED_TOPIC_NAME"    $topics.metadataChangeLogVersioned) }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_LOG_TIMESERIES_TOPIC_NAME"   $topics.metadataChangeLogTimeseries) }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_PROPOSAL_TOPIC_NAME"         $topics.metadataChangeProposal) }}
{{- include "datahub.setEnv" (list $env "FAILED_METADATA_CHANGE_PROPOSAL_TOPIC_NAME"  $topics.failedMetadataChangeProposal) }}
{{- include "datahub.setEnv" (list $env "PLATFORM_EVENT_TOPIC_NAME"                   $topics.platformEvent) }}
{{- include "datahub.setEnv" (list $env "METADATA_AUDIT_EVENT_NAME"                   $topics.metadataAuditEvent) }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_EVENT_NAME"                  $topics.metadataChangeEvent) }}
{{- include "datahub.setEnv" (list $env "FAILED_METADATA_CHANGE_EVENT_NAME"           $topics.failedMetadataChangeEvent) }}
{{- include "datahub.setEnv" (list $env "DATAHUB_UPGRADE_HISTORY_TOPIC_NAME"          $topics.upgradeHistory) }}
{{- include "datahub.setEnv" (list $env "DATAHUB_USAGE_EVENT_NAME"                    $topics.usageEvent) }}

{{- $_ := set $env "DATAHUB_ANALYTICS_ENABLED" .Values.analytics.enabled }}
{{- $_ := set $env "ENABLE_PROMETHEUS" .Values.metrics.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "datahub.fullname" . }}
  labels:
    {{- include "datahub.labels" . | nindent 4 }}
type: Opaque
stringData:
  {{- range $key, $value := $env }}
  {{ $key }}: {{ $value | quote }}
  {{- end }}
