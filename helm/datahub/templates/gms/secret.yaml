{{ $env := dict }}
{{- $_ := set $env "ENTITY_REGISTRY_CONFIG_PATH" "/datahub/datahub-gms/resources/entity-registry.yml" }}

{{- $_ := set $env "ENTITY_SERVICE_IMPL" (.Values.entityService.impl | required "missing 'entityService.impl'") }}
{{- if eq .Values.entityService.impl "ebean" -}}
  {{- $ebean := .Values.ebean }}
  {{- $datasourceHost := printf "%s:%d" ($ebean.host | required "missing 'ebean.host'") (int $ebean.port | required "missing 'ebean.port'") }}
  {{- $_ := set $env "EBEAN_DATASOURCE_HOST" $datasourceHost }}
  {{- $_ := set $env "EBEAN_DATASOURCE_URL" (printf "jdbc:%s://%s/%s" $ebean.type $datasourceHost ($ebean.database | required "missing 'ebean.database'")) }}
  {{- $driverMap := dict "mysql" "com.mysql.jdbc.Driver" "postgresql" "org.postgresql.Driver" }}
  {{- $_ := set $env "EBEAN_DATASOURCE_DRIVER" ($ebean.driver | default (get $driverMap $ebean.type | required "known ebean.type")) }}
  {{- if $ebean.useAwsIamAuth }}
    {{- $_ := set $env "EBEAN_POSTGRES_USE_AWS_IAM_AUTH" true}}
  {{- else }}
    {{- $_ := set $env "EBEAN_DATASOURCE_USERNAME" ($ebean.username | required "missing 'ebean.username'") }}
    {{- $_ := set $env "EBEAN_DATASOURCE_PASSWORD" ($ebean.password | required "missing 'ebean.password'") }}
  {{- end -}}
{{- else if eq .Values.entityService.impl "cassandra" -}}
  {{- $cassandra := .Values.cassandra }}
  {{- $_ := set $env "CASSANDRA_HOSTS" ($cassandra.host | required "missing 'cassandra.host'") }}
  {{- $_ := set $env "CASSANDRA_PORT"  (int $cassandra.port | required "missing 'cassandra.port'") }}
  {{- $datasourceHost := printf "%s:%d" $cassandra.host (int $cassandra.port) }}
  {{- $_ := set $env "CASSANDRA_DATASOURCE_HOST" $datasourceHost }}
  {{- if $cassandra.username }}
    {{- $_ := set $env "CASSANDRA_DATASOURCE_USERNAME" $cassandra.username }}
    {{- $_ := set $env "CASSANDRA_DATASOURCE_PASSWORD" ($cassandra.password | required "missing 'cassandra.password'") }}
  {{- end }}
  {{- $_ := set $env "CASSANDRA_DATACENTER" ($cassandra.datacenter | required "missing 'cassandra.datacenter'") }}
  {{- $_ := set $env "CASSANDRA_KEYSPACE"   ($cassandra.keyspace | required "missing 'cassandra.keyspace'") }}
  {{- $_ := set $env "CASSANDRA_USE_SSL" $cassandra.useSSL }}
{{- else }}
  {{- fail (printf "unknow entityService.impl %s, support 'ebean' and 'cassandra'" .Values.entityService.impl) }}
{{- end -}}

{{- $_ := set $env "GRAPH_SERVICE_IMPL" (.Values.graphService.impl | required "missing 'graphService.impl'") }}
{{- if eq .Values.graphService.impl "neo4j" -}}
  {{- $neo4j := .Values.neo4j }}
  {{- $_ := set $env "NEO4J_URI" ($neo4j.uri | required "missing 'neo4j.uri'") }}
  {{- if $neo4j.username }}
    {{- $_ := set $env "NEO4J_USERNAME" $neo4j.username }}
    {{- $_ := set $env "NEO4J_PASSWORD" ($neo4j.password | required "missing 'neo4j.password'") }}
  {{- end }}
{{- else if eq .Values.graphService.impl "elasticsearch" -}}
  {{/* elasticsearch session bellow */}}
{{- else }}
  {{- fail (printf "unknow graphService.impl %s, support 'neo4j' and 'elasticsearch'" .Values.graphService.impl) }}
{{- end -}}

{{- $elasticsearch := .Values.elasticsearch }}
{{- $_ := set $env "ELASTICSEARCH_HOST" ($elasticsearch.host | required "missing 'elasticsearch.host'") }}
{{- $_ := set $env "ELASTICSEARCH_PORT" ($elasticsearch.port | required "missing 'elasticsearch.port'") }}
{{- $_ := set $env "ELASTICSEARCH_USE_SSL" $elasticsearch.useSSL }}
{{- if $elasticsearch.username }}
  {{- $_ := set $env "ELASTICSEARCH_USERNAME" $elasticsearch.username }}
  {{- $_ := set $env "ELASTICSEARCH_PASSWORD" ($elasticsearch.password | required "missing 'elasticsearch.password'") }}
{{- else if $elasticsearch.useAwsIamAuth -}}
  {{- $_ := set $env "OPENSEARCH_USE_AWS_IAM_AUTH" true }}
{{- end }}
{{- include "datahub.setEnv" (list $env "INDEX_PREFIX" $elasticsearch.index.prefix) }}
{{- include "datahub.setEnv" (list $env "ELASTICSEARCH_NUM_SHARDS_PER_INDEX" $elasticsearch.index.numShards) }}
{{- include "datahub.setEnv" (list $env "ELASTICSEARCH_NUM_REPLICAS_PER_INDEX" $elasticsearch.index.numReplicas) }}
{{- include "datahub.setEnv" (list $env "ELASTICSEARCH_INDEX_BUILDER_NUM_RETRIES" $elasticsearch.index.numRetries) }}
{{- include "datahub.setEnv" (list $env "ELASTICSEARCH_INDEX_BUILDER_REFRESH_INTERVAL_SECONDS" $elasticsearch.index.refreshIntervalSeconds) }}

{{- include "datahub.setEnv" (list $env "SEARCH_SERVICE_BATCH_SIZE" .Values.searchService.resultBatchSize) }}
{{- $_ := set $env "SEARCH_SERVICE_ENABLE_CACHE" .Values.searchService.enableCache }}
{{- if .Values.searchService.enableCache }}
  {{- $_ := set $env "SEARCH_SERVICE_CACHE_IMPLEMENTATION" .Values.searchService.cacheImplementation }}
  {{- if eq .Values.searchService.cacheImplementation "hazelcast" }}
    {{- $_ := set $env "SEARCH_SERVICE_HAZELCAST_SERVICE_NAME" (.Values.searchService.cache.hazelcast.serviceName | required "missing 'searchService.cache.hazelcast.serviceName'") }}
  {{- end }}
{{- end }}

{{- $_ := set $env "MCE_CONSUMER_ENABLED" true }} # deprecated in favor of MCP_CONSUMER_ENABLED
{{- $_ := set $env "MCP_CONSUMER_ENABLED" true }}
{{- $_ := set $env "MAE_CONSUMER_ENABLED" true }} # deprecated in favor of MCL_CONSUMER_ENABLED
{{- $_ := set $env "MCL_CONSUMER_ENABLED" true }}
{{- $_ := set $env "PE_CONSUMER_ENABLED"  true }}
{{- $consumerGroups := .Values.kafka.consumerGroups }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_LOG_KAFKA_CONSUMER_GROUP_ID"       $consumerGroups.metadataChangeLog) }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_PROPOSAL_KAFKA_CONSUMER_GROUP_ID"  $consumerGroups.metadataChangeProposal) }}
{{- include "datahub.setEnv" (list $env "PLATFORM_EVENT_KAFKA_CONSUMER_GROUP_ID"            $consumerGroups.platformEvent) }}
{{- include "datahub.setEnv" (list $env "METADATA_AUDIT_EVENT_KAFKA_CONSUMER_GROUP_ID"      $consumerGroups.metadataAuditEvent) }}
{{- include "datahub.setEnv" (list $env "METADATA_CHANGE_EVENT_KAFKA_CONSUMER_GROUP_ID"     $consumerGroups.metadataChangeEvent) }}
{{- include "datahub.setEnv" (list $env "DATAHUB_USAGE_EVENT_KAFKA_CONSUMER_GROUP_ID"       $consumerGroups.usageEvent) }}

{{- $gmsAuthn := .Values.authn.gms }}
{{- if $gmsAuthn.enabled }}
  {{- $secret := (lookup "v1" "Secret" .Release.Namespace (printf "%s-gms" (include "datahub.fullname" .))).data | default dict -}}
  {{- include "datahub.setSecretEnv" (list $env "DATAHUB_TOKEN_SERVICE_SIGNING_KEY" $gmsAuthn.tokenService.signingKey $secret (randAlphaNum 32)) }}
  {{- include "datahub.setSecretEnv" (list $env "DATAHUB_TOKEN_SERVICE_SALT" $gmsAuthn.tokenService.salt $secret (randAlphaNum 32)) }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "datahub.fullname" . }}-gms
  labels:
    {{- include "datahub.gms.labels" . | nindent 4 }}
type: Opaque
stringData:
  {{- range $key, $value := $env }}
  {{ $key }}: {{ $value | quote }}
  {{- end }}
