superset:
  extraSupersetConfig: |
    # ===== Security =====
    # https://flask-appbuilder.readthedocs.io/en/latest/security.html

    from flask_appbuilder.security.manager import AUTH_OAUTH

    AUTH_TYPE = AUTH_OAUTH
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = "Public"

    keycloak_endpoint = "https://keycloak.dungdm93.me"
    keycloak_realm = "data"

    def compliance_fix_self_signed_ca(session):
        session.verify = "/etc/pki/k8s/ca.crt"

    OAUTH_PROVIDERS = [
        {
            "name": "keycloak",
            "icon": "fa-key",
            "token_key": "access_token",
            "remote_app": {
                "client_id": os.environ.get("KEYCLOAK_CLIENT_ID"),
                "client_secret": os.environ.get("KEYCLOAK_CLIENT_SECRET"),
                "client_kwargs": {
                    "scope": "openid email profile"
                },
                "api_base_url": f"{keycloak_endpoint}/auth/realms/{keycloak_realm}/",
                "authorize_url": f"{keycloak_endpoint}/auth/realms/{keycloak_realm}/protocol/openid-connect/auth",
                "access_token_url": f"{keycloak_endpoint}/auth/realms/{keycloak_realm}/protocol/openid-connect/token",
                "request_token_url": None, # OAuth 1.0 only
                "compliance_fix": compliance_fix_self_signed_ca
            },
        },
    ]

    from superset.security import SupersetSecurityManager

    class KeyCloakSecurityManager(SupersetSecurityManager):
        log = logging.getLogger(__name__)

        def oauth_user_info(self, provider, response=None):
            if provider.lower() != "keycloak":
                return self.get_oauth_user_info(provider, response)

            me = self.appbuilder.sm.oauth_remotes[provider].get("protocol/openid-connect/userinfo")
            data = me.json()

            self.log.warn(f"User info {data}")
            return {
                "id":         data["sub"],
                "name":       data["name"],
                "username":   data["preferred_username"],
                "email":      data.get("email"),
                "first_name": data.get("given_name"),
                "last_name":  data.get("family_name"),
            }

    CUSTOM_SECURITY_MANAGER = KeyCloakSecurityManager

webserver:
  extraVolumeMounts:
  - name: certificate
    mountPath: /etc/pki/k8s/
    readOnly: true
  extraVolumes:
  - name: certificate
    secret:
      secretName: superset.dungdm93.me-tls
